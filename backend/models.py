from pydantic import BaseModel
from typing import List, Dict, Any

# Data model for Budgeting Expert
class ExpenseCategory(BaseModel):
    name: str
    amount: float

class BudgetRequest(BaseModel):
    monthly_income: float
    expense_categories: List[ExpenseCategory]
    age_range: str
    savings_goals: int  # e.g., desired savings percentage

class CategoryAnalysis(BaseModel):
    category_name: str
    message: str

class RealTimeFeedback(BaseModel):
    tips: str
    message: str

class BudgetResponse(BaseModel):
    total_income: float
    total_allocated_expenses: float
    remaining_balance: float
    savings_percentage: float
    category_analysis: List[CategoryAnalysis]
    real_time_feedback: List[RealTimeFeedback]

class BusinessScenarioRequest(BaseModel):
    business_type: str
    pricing_strategy: str

# Data model for the scenario generated by the LLM
class Scenario(BaseModel):
    scenario_id: int
    business_type: str
    pricing_strategy: str
    description: str
    details: Dict[str, Any]  # Details about financial metrics, risks, and other specifics

class BusinessRiskAnalysis(BaseModel):
    risk_analysis: List[str]  # List of risk analysis points
    learnings: List[str]      # List of one-word learnings

class FinancialInsights(BaseModel):
    scenario_description: str  # Description of the scenario
    critical_questions: List[str]  # List of critical questions for decision-making
    decision_points: Dict[str, str]  # Key decision points and their impact on business components

# Task results model
class BusinessScenarioResponse(BaseModel):
    financial_insights: FinancialInsights
    risk_analysis: BusinessRiskAnalysis